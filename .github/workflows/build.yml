name: Make Windows

on:
  push:
    branches: [ main ]
    
jobs:
  test:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install SQLite
      shell: cmd
      run: |
        choco install sqlite --version 3.44.2 -y || (
          echo "Downloading SQLite..."
          curl -L -o sqlite-tools-win32-x86-3440200.zip https://sqlite.org/2023/sqlite-tools-win32-x86-3440200.zip
          7z x sqlite-tools-win32-x86-3440200.zip -o"C:\sqlite"
          setx PATH "%PATH%;C:\sqlite\sqlite-tools-win32-x86-3440200" /M
        )

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Install Chrome and ChromeDriver
      run: |
        # 下载 Chrome for Testing
        Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.168/win64/chrome-win64.zip" -OutFile "chrome-win64.zip"
        Expand-Archive -Path "chrome-win64.zip" -DestinationPath .
        $chromePath = "$pwd\chrome-win64\chrome.exe"
        # 将 Chrome 添加到 PATH
        echo "$pwd\chrome-win64" | Out-File -FilePath $env:GITHUB_PATH -Append
        
        # 下载 ChromeDriver
        Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.168/win64/chromedriver-win64.zip" -OutFile "chromedriver-win64.zip"
        Expand-Archive -Path "chromedriver-win64.zip" -DestinationPath .
        echo "$pwd\chromedriver-win64" | Out-File -FilePath $env:GITHUB_PATH -Append
    
    - name: Install dependencies
      run: |
        cd web
        npm install
        cd ..
        cd fantoccini
        cargo fetch
        cd ..

    - name: Update git submodules
      run: |
        git submodule sync --recursive
        git submodule update --init --force --recursive
        git submodule foreach --recursive 'git reset --hard origin/main'
        git submodule foreach --recursive 'git clean -fd'

    - name: Copy card directory
      run: |
        xcopy /E /I /Y "card" "web\src\static"
        copy .\card\cards.cdb fantoccini

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Run
      run: |
        Start-Process -FilePath "chromedriver.exe" -ArgumentList "--port=9515" -NoNewWindow -RedirectStandardOutput "chromedriver.log" -PassThru | Select-Object -ExpandProperty Id | Out-File -FilePath "chromedriver.pid"
        $count = 0
        while (!(Test-NetConnection -ComputerName localhost -Port 9515).TcpTestSucceeded -and $count -lt 30) {
          Start-Sleep -Seconds 1
          $count++
        }

        cd web
        npm run build:h5
        cd dist\build\h5
        Start-Process -FilePath "python" -ArgumentList "-m http.server 5173" -NoNewWindow -RedirectStandardOutput "frontend.log" -PassThru | Select-Object -ExpandProperty Id | Out-File -FilePath "..\..\..\frontend.pid"
        $count = 0
        while (!(Test-NetConnection -ComputerName localhost -Port 5173).TcpTestSucceeded -and $count -lt 30) {
          Start-Sleep -Seconds 1
          $count++
        }
        if ($count -eq 30) { exit 1 }
        cd ..\..\..\..
        cd fantoccini
        @echo off
          setlocal enabledelayedexpansion
          
          :: 设置路径
          set SRC_DB=..\cards.cdb
          set DST_DB=..\web\dist\build\h5\cards.cdb
          set BATCH_SIZE=100
          
          :: 创建目标目录
          if not exist "..\web\dist\build\h5" mkdir "..\web\dist\build\h5"
          
          :: 初始化目标数据库
          if exist "%DST_DB%" del "%DST_DB%"
          sqlite3 "%DST_DB%" "
            CREATE TABLE texts(
              id integer primary key,
              name text,
              desc text,
              str1 text, str2 text, str3 text, str4 text, str5 text,
              str6 text, str7 text, str8 text, str9 text, str10 text,
              str11 text, str12 text, str13 text, str14 text, str15 text, str16 text
            );
            
            CREATE TABLE datas(
              id integer primary key,
              ot integer, alias integer, setcode integer, type integer,
              atk integer, def integer, level integer, race integer,
              attribute integer, category integer
            );
          "
          
          :: 获取总数据量
          sqlite3 "%SRC_DB%" "SELECT COUNT(*) FROM datas;" > count.txt
          set /p TOTAL_COUNT=<count.txt
          del count.txt
          
          :: 计算批次数量
          set /a BATCH_COUNT=(%TOTAL_COUNT% + %BATCH_SIZE% - 1) / %BATCH_SIZE%
          
          :: 分批处理
          for /L %%i in (0,1,%BATCH_COUNT%) do (
            set /a OFFSET=%%i * %BATCH_SIZE%
            
            echo 处理批次 %%i (偏移量 !OFFSET!)
            
            if exist "%DST_DB%" del "%DST_DB%"
            sqlite3 "%DST_DB%" "
              CREATE TABLE texts(
                id integer primary key,
                name text,
                desc text,
                str1 text, str2 text, str3 text, str4 text, str5 text,
                str6 text, str7 text, str8 text, str9 text, str10 text,
                str11 text, str12 text, str13 text, str14 text, str15 text, str16 text
              );
              
              CREATE TABLE datas(
                id integer primary key,
                ot integer, alias integer, setcode integer, type integer,
                atk integer, def integer, level integer, race integer,
                attribute integer, category integer
              );
            "

            :: 直接插入数据
            sqlite3 "%DST_DB%" "
              INSERT INTO datas
              SELECT * FROM '%SRC_DB%'.datas
              ORDER BY id LIMIT %BATCH_SIZE% OFFSET !OFFSET!;
              
              INSERT INTO texts
              SELECT texts.* FROM '%SRC_DB%'.texts
              JOIN '%SRC_DB%'.datas ON datas.id = texts.id
              ORDER BY datas.id LIMIT %BATCH_SIZE% OFFSET !OFFSET!;
            "
            
            :: 复制和执行cargo
            copy /Y "%DST_DB%" .\cards.cdb
            cargo run
          )
        "
        

    - name: Cleanup processes
      if: always()
      run: |
        if (Test-Path "chromedriver.pid") {
          $chromedriverpid = Get-Content "chromedriver.pid"
          Stop-Process -Id $chromedriverpid -Force -ErrorAction SilentlyContinue
        }
        if (Test-Path "frontend.pid") {
          $frontendpid = Get-Content "frontend.pid"
          Stop-Process -Id $frontendpid -Force -ErrorAction SilentlyContinue
        }
        Get-Process -Name "chrome", "chromedriver" -ErrorAction SilentlyContinue | Stop-Process -Force

    - name: Upload pics.zip as artifact
      uses: actions/upload-artifact@v4
      with:
        name: pictures
        path: .\fantoccini\downloads\