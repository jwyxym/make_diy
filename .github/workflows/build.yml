name: Make Windows

on:
  push:
    branches: [ main ]
    
jobs:
  test:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Install Chrome and ChromeDriver
      run: |
        # 下载 Chrome for Testing
        Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.168/win64/chrome-win64.zip" -OutFile "chrome-win64.zip"
        Expand-Archive -Path "chrome-win64.zip" -DestinationPath .
        $chromePath = "$pwd\chrome-win64\chrome.exe"
        # 将 Chrome 添加到 PATH
        echo "$pwd\chrome-win64" | Out-File -FilePath $env:GITHUB_PATH -Append
        
        # 下载 ChromeDriver
        Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.168/win64/chromedriver-win64.zip" -OutFile "chromedriver-win64.zip"
        Expand-Archive -Path "chromedriver-win64.zip" -DestinationPath .
        echo "$pwd\chromedriver-win64" | Out-File -FilePath $env:GITHUB_PATH -Append
    
    - name: Install dependencies
      run: |
        cd web
        npm install
        cd ..
        cd fantoccini
        cargo fetch
        cd ..

    - name: Update git submodules
      run: |
        git submodule sync --recursive
        git submodule update --init --force --recursive
        git submodule foreach --recursive 'git reset --hard origin/main'
        git submodule foreach --recursive 'git clean -fd'

    - name: Copy card directory
      run: |
        xcopy /E /I /Y "card\pics" "web\src\static\pics"
        copy .\card\cards.cdb fantoccini

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Run
      run: |
        Start-Process -FilePath "chromedriver.exe" -ArgumentList "--port=9515" -NoNewWindow -RedirectStandardOutput "chromedriver.log" -PassThru | Select-Object -ExpandProperty Id | Out-File -FilePath "chromedriver.pid"
        $count = 0
        while (!(Test-NetConnection -ComputerName localhost -Port 9515).TcpTestSucceeded -and $count -lt 30) {
          Start-Sleep -Seconds 1
          $count++
        }

        cd web
        npm run build:h5
        cd dist\build\h5
        Start-Process -FilePath "python" -ArgumentList "-m http.server 5173" -NoNewWindow -RedirectStandardOutput "frontend.log" -PassThru | Select-Object -ExpandProperty Id | Out-File -FilePath "..\..\..\frontend.pid"
        $count = 0
        while (!(Test-NetConnection -ComputerName localhost -Port 5173).TcpTestSucceeded -and $count -lt 30) {
          Start-Sleep -Seconds 1
          $count++
        }
        if ($count -eq 30) { exit 1 }
        cd ..\..\..\..
        cd fantoccini
        python -c "
          import sqlite3
          import os
          import shutil

          # 连接源数据库
          src_db_path = os.path.join('..', 'cards.cdb')
          dst_db_path = os.path.join('..', 'web', 'dist', 'build', 'h5', 'cards.cdb')

          # 确保目标目录存在
          os.makedirs(os.path.dirname(dst_db_path), exist_ok=True)

          # 复制原始数据库（如果存在）
          if os.path.exists(src_db_path):
            shutil.copy2(src_db_path, dst_db_path)

          # 连接源数据库并查询数据
          src_conn = sqlite3.connect(src_db_path)
          src_cursor = src_conn.cursor()
          src_cursor.execute('SELECT * FROM datas, texts WHERE datas.id = texts.id')
          rows = src_cursor.fetchall()
          src_conn.close()

          batch_size = 100
          for i in range(0, len(rows), batch_size):
            batch = rows[i:i + batch_size]
              
            # 创建/连接目标数据库
            dst_conn = sqlite3.connect(dst_db_path)
            dst_cursor = dst_conn.cursor()

            # 创建表（如果不存在）
            dst_cursor.execute("""
              CREATE TABLE IF NOT EXISTS texts(
                id integer primary key,
                name text,
                desc text,
                str1 text,
                str2 text,
                str3 text,
                str4 text,
                str5 text,
                str6 text,
                str7 text,
                str8 text,
                str9 text,
                str10 text,
                str11 text,
                str12 text,
                str13 text,
                str14 text,
                str15 text,
                str16 text
              )
            """)

            dst_cursor.execute("""
              CREATE TABLE IF NOT EXISTS datas(
                id integer primary key,
                ot integer,
                alias integer,
                setcode integer,
                type integer,
                atk integer,
                def integer,
                level integer,
                race integer,
                attribute integer,
                category integer
              )
            """)
            dst_conn.commit()

            # 插入datas表数据
            datas_values = [
                (row[0], row[1], row[2], row[3], row[4], 
                row[5], row[6], row[7], row[8], row[9], row[10])
                for row in batch
            ]
            dst_cursor.executemany(
                "INSERT OR REPLACE INTO datas VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                datas_values
            )
            
            # 插入texts表数据
            texts_values = [
                (row[11], row[12], row[13], row[14], row[15],
                row[16], row[17], row[18], row[19], row[20],
                row[21], row[22], row[23], row[24], row[25],
                row[26], row[27], row[28], row[29])
                for row in batch
            ]
            dst_cursor.executemany(
                """INSERT OR REPLACE INTO texts VALUES (
                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                    ?, ?, ?, ?, ?, ?, ?, ?, ?
                )""",
                texts_values
            )
            
            dst_conn.commit()
            dst_conn.close()
            
            shutil.copy2(dst_db_path, '.')
            os.system('cargo run')
            os.remove(dst_db_path)
            os.remove('cards.cdb')
        "
        

    - name: Cleanup processes
      if: always()
      run: |
        if (Test-Path "chromedriver.pid") {
          $chromedriverpid = Get-Content "chromedriver.pid"
          Stop-Process -Id $chromedriverpid -Force -ErrorAction SilentlyContinue
        }
        if (Test-Path "frontend.pid") {
          $frontendpid = Get-Content "frontend.pid"
          Stop-Process -Id $frontendpid -Force -ErrorAction SilentlyContinue
        }
        Get-Process -Name "chrome", "chromedriver" -ErrorAction SilentlyContinue | Stop-Process -Force

    - name: Upload pics.zip as artifact
      uses: actions/upload-artifact@v4
      with:
        name: pictures
        path: .\fantoccini\downloads\